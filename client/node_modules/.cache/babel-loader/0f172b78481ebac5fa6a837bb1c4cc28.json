{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = roomId => {\n  _s();\n\n  const [messages, setMessages] = useState([]); // creates a reference, like a box that holds a .current property as mutable value\n\n  const socketRef = useRef(); // the Ref's current property is assigned\n\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: {\n        roomId\n      }\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, message => {\n      const incomingMessage = { ...message,\n        ownedByCurrent\n      };\n    });\n  });\n\n  const sendMessage = messageBody => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id\n    });\n  };\n\n  return {\n    messages,\n    sendMessage\n  };\n};\n\n_s(useChat, \"rJUxOyV7d92WYkbiDZQ/Q3CnO+M=\");\n\nexport default useChat;","map":{"version":3,"sources":["/Users/jimmylin/Desktop/Projects/socket.io-react-hooks-chat/client/src/useChat.js"],"names":["useEffect","useRef","useState","socketIOClient","NEW_CHAT_MESSAGE_EVENT","SOCKET_SERVER_URL","useChat","roomId","messages","setMessages","socketRef","current","query","on","message","incomingMessage","ownedByCurrent","sendMessage","messageBody","emit","body","senderId","id"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,MAAMC,sBAAsB,GAAG,gBAA/B;AACA,MAAMC,iBAAiB,GAAG,uBAA1B;;AAEA,MAAMC,OAAO,GAAIC,MAAD,IAAY;AAAA;;AAC1B,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC,CAD0B,CAE1B;;AACA,QAAMQ,SAAS,GAAGT,MAAM,EAAxB,CAH0B,CAK1B;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,SAAS,CAACC,OAAV,GAAoBR,cAAc,CAACE,iBAAD,EAAoB;AACpDO,MAAAA,KAAK,EAAE;AAAEL,QAAAA;AAAF;AAD6C,KAApB,CAAlC;AAGAG,IAAAA,SAAS,CAACC,OAAV,CAAkBE,EAAlB,CAAqBT,sBAArB,EAA8CU,OAAD,IAAa;AACxD,YAAMC,eAAe,GAAG,EACtB,GAAGD,OADmB;AAEtBE,QAAAA;AAFsB,OAAxB;AAID,KALD;AAMD,GAVQ,CAAT;;AAYA,QAAMC,WAAW,GAAIC,WAAD,IAAiB;AACnCR,IAAAA,SAAS,CAACC,OAAV,CAAkBQ,IAAlB,CAAuBf,sBAAvB,EAA+C;AAC7CgB,MAAAA,IAAI,EAAEF,WADuC;AAE7CG,MAAAA,QAAQ,EAAEX,SAAS,CAACC,OAAV,CAAkBW;AAFiB,KAA/C;AAID,GALD;;AAOA,SAAO;AAAEd,IAAAA,QAAF;AAAYS,IAAAA;AAAZ,GAAP;AACD,CA1BD;;GAAMX,O;;AA4BN,eAAeA,OAAf","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst NEW_CHAT_MESSAGE_EVENT = \"newChatMessage\";\nconst SOCKET_SERVER_URL = \"http://localhost:4000\";\n\nconst useChat = (roomId) => {\n  const [messages, setMessages] = useState([]);\n  // creates a reference, like a box that holds a .current property as mutable value\n  const socketRef = useRef();\n\n  // the Ref's current property is assigned\n  useEffect(() => {\n    socketRef.current = socketIOClient(SOCKET_SERVER_URL, {\n      query: { roomId },\n    });\n    socketRef.current.on(NEW_CHAT_MESSAGE_EVENT, (message) => {\n      const incomingMessage = {\n        ...message,\n        ownedByCurrent\n      }\n    })\n  });\n\n  const sendMessage = (messageBody) => {\n    socketRef.current.emit(NEW_CHAT_MESSAGE_EVENT, {\n      body: messageBody,\n      senderId: socketRef.current.id,\n    });\n  };\n\n  return { messages, sendMessage };\n};\n\nexport default useChat;\n"]},"metadata":{},"sourceType":"module"}