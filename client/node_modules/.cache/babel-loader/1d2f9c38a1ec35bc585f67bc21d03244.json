{"ast":null,"code":"var _jsxFileName = \"/Users/jimmylin/Desktop/Projects/socket.io-react-hooks-chat/client/src/Chatroom/Chatroom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./Chatroom.css\";\nimport useChat from \"../useChat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chatroom = props => {\n  _s();\n\n  // gets the roomId for the URL params\n  const {\n    roomId\n  } = useParams();\n  const {\n    messages,\n    sendMessage\n  } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const handleNewMessageChange = e => {\n    setNewMessage(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-room-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-name\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-container\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        className: \"messages-list\",\n        children: messages.map((message, i) => {\n          /*#__PURE__*/\n          _jsxDEV(\"li\", {\n            // will show the css conditionally for my-message or received message\n            className: `message-item ${message.ownedByCurrentUser ? \"my-message\" : \"received-message\"}`,\n            children: message.body\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: newMessage,\n      onChange: handleNewMessageChange,\n      placeholder: \"Write message...\",\n      className: \"new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSendMessage,\n      className: \"send-message-button\",\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chatroom, \"3bQ1Sib4B0idern1Ejg3CegqHTs=\", false, function () {\n  return [useParams, useChat];\n});\n\n_c = Chatroom;\nexport default Chatroom;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chatroom\");","map":{"version":3,"sources":["/Users/jimmylin/Desktop/Projects/socket.io-react-hooks-chat/client/src/Chatroom/Chatroom.jsx"],"names":["React","useState","useParams","useChat","Chatroom","props","roomId","messages","sendMessage","newMessage","setNewMessage","handleNewMessageChange","e","target","value","handleSendMessage","map","message","i","ownedByCurrentUser","body"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAO,gBAAP;AAEA,OAAOC,OAAP,MAAoB,YAApB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAC1B;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAaJ,SAAS,EAA5B;AACA,QAAM;AAAEK,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA4BL,OAAO,CAACG,MAAD,CAAzC;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAMU,sBAAsB,GAAIC,CAAD,IAAO;AACpCF,IAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACD,GAFD;;AAIA,QAAMC,iBAAiB,GAAG,MAAM;AAC9BP,IAAAA,WAAW,CAACC,UAAD,CAAX;AACAC,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAHD;;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA,2BAAiCJ,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,6BACE;AAAI,QAAA,SAAS,EAAC,eAAd;AAAA,kBACGC,QAAQ,CAACS,GAAT,CAAa,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAC5B;AAAA;AAEE;AACA,YAAA,SAAS,EAAG,gBACVD,OAAO,CAACE,kBAAR,GAA6B,YAA7B,GAA4C,kBAC7C,EALH;AAAA,sBAOGF,OAAO,CAACG;AAPX,aACOF,CADP;AAAA;AAAA;AAAA;AAAA;AASD,SAVA;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAiBE;AACE,MAAA,KAAK,EAAET,UADT;AAEE,MAAA,QAAQ,EAAEE,sBAFZ;AAGE,MAAA,WAAW,EAAC,kBAHd;AAIE,MAAA,SAAS,EAAC;AAJZ;AAAA;AAAA;AAAA;AAAA,YAjBF,eAuBE;AAAQ,MAAA,OAAO,EAAEI,iBAAjB;AAAoC,MAAA,SAAS,EAAC,qBAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CA5CD;;GAAMX,Q;UAEeF,S,EACeC,O;;;KAH9BC,Q;AA6CN,eAAeA,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./Chatroom.css\";\n\nimport useChat from \"../useChat\";\n\nconst Chatroom = (props) => {\n  // gets the roomId for the URL params\n  const { roomId } = useParams();\n  const { messages, sendMessage } = useChat(roomId);\n  const [newMessage, setNewMessage] = useState(\"\");\n\n  const handleNewMessageChange = (e) => {\n    setNewMessage(e.target.value);\n  };\n\n  const handleSendMessage = () => {\n    sendMessage(newMessage);\n    setNewMessage(\"\");\n  };\n\n  return (\n    <div className=\"chat-room-container\">\n      <h1 className=\"room-name\">Room: {roomId}</h1>\n      <div className=\"messages-container\">\n        <ol className=\"messages-list\">\n          {messages.map((message, i) => {\n            <li\n              key={i}\n              // will show the css conditionally for my-message or received message\n              className={`message-item ${\n                message.ownedByCurrentUser ? \"my-message\" : \"received-message\"\n              }`}\n            >\n              {message.body}\n            </li>;\n          })}\n        </ol>\n      </div>\n      <textarea\n        value={newMessage}\n        onChange={handleNewMessageChange}\n        placeholder=\"Write message...\"\n        className=\"new\"\n      />\n      <button onClick={handleSendMessage} className=\"send-message-button\" >\n        Send\n      </button>\n    </div>\n  );\n};\nexport default Chatroom;\n"]},"metadata":{},"sourceType":"module"}